#!/usr/bin/node
// Code based on https://gist.github.com/martinsik/2031681

"use strict";

var config=require("./conf.js");
var clients={};
var peers={};

var webSocketServer=require('websocket').server;
var http=require('http');
var fs=require('fs');

var sqlite3=require('sqlite3');
var db=new sqlite3.Database(config.database, function(error) {
  if(error) {
    console.log("Can't open SQLITE database: "+error.message);
    process.exit(1);
  }

  db.exec("select * from mass_event", function(error) {
    if(error) {
      console.log("Database seems to be empty -> initializing");
      fs.readFile("./init.sql", "utf8", function(error, text) {
	if(error) {
	  console.log("Error reading init.sql");
	  process.exit(1);
	}

	db.exec(text, function(error) {
	  if(error) {
	    console.log("Error initializing database: "+error.message);
	    process.exit(1);
	  }
	});
      });
    }
  });
});

var hooks=require('./modules/base/modules/hooks/hooks.js');
var test=require('./server-test.js');
test.register({hooks: hooks});
hooks.call("server_init");

var server=http.createServer(function(request, response) {
});
server.listen(config.port, function() {
  console.log((new Date())+" HTTP server listening on port "+config.port);
});

var wsServer=new webSocketServer({
  httpServer: server
});

var uniq_ids={};
function uniq_id() {
  var ret="";

  do {
    for(var i=0; i<4; i++)
      ret+=String.fromCharCode(Math.floor(Math.random()*26)+65);
  } while(uniq_ids[i]);

  uniq_ids[ret]=true;

  return ret;
}

function client(connection, request) {
  this.connection=connection;

  this.connection.on('message', function(message) {
    var param=null;

    if(message.type==="utf8") {
      console.log((new Date())+" Received message from "+this.id);
      try {
	param=JSON.parse(message.utf8Data);
      }
      catch(e) {
      }

      // answer request
      if(param&&param.request) {
	db.each("select * from message",
	    [ ],
	    function(error, row) {
	      if(error) {
		console.log("Error select from database: "+error.message);
	      }
	      else {
		row.data=JSON.parse(row.data);
		this.send(row);
	      }
	    }.bind(this)
	  );

	return;
      }

      if(param&&param.type=="hello") {
	if(param.data.client_id) {
	  this.client_id=param.data.client_id;
	}
	else {
	  this.client_id=uniq_id();
	}
	console.log("Connect from "+this.client_id);

	// TODO: get peer_id of previous connection
	if(clients[this.client_id]) {
	  this.peer_id=clients[this.client_id].peer_id;

	  if(this!=clients[this.client_id]) {
	    console.log("Replace connection");
	    clients[this.client_id].close();
	  }
	}
	else {
	  if(peers[this.client_id])
	    this.peer_id=peers[this.client_id];
          else
	    this.peer_id=uniq_id();
	}

	clients[this.client_id]=this;
	peers[this.client_id]=this.peer_id;

	console.log((new Date())+" Connection "+this.client_id+"/"+this.peer_id+" accepted");

	this.send({
	  type: 'welcome',
	  timestamp: new Date().toISOString(),
	  peer_id: this.peer_id,
	  data: {
	    client_id: this.client_id
	  }
	});

	param={
	  type: 'connect',
	  timestamp: new Date().toISOString(),
	  peer_id: this.peer_id
	};
      }

      if(param) {
	param.peer_id=this.peer_id;

	if(!('data' in param))
	  param.data={};

	this.broadcast(param);
      }
    }

    // Request for disconnect -> close connection to peer
    if(param&&param.type=="disconnect") {
      this.close();
    }

    if(!param) {
      console.log((new Date())+" Illegal message received: ");
      console.log(message);
    }
  }.bind(this));

  this.connection.on('close', function() {
    delete(clients[this.client_id]);
    console.log((new Date())+" Connection "+this.client_id+"/"+this.peer_id+" closed");

    this.broadcast({
      type: 'disconnect',
      timestamp: new Date().toISOString(),
      peer_id: this.peer_id
    });
  }.bind(this));
}

client.prototype.db_callback_message=function(param, row) {
  hooks.call("message_received", param, this);

  console.log(param);

  for(var i in clients) {
    if(i!=this.client_id)
      clients[i].send(param);
    else
      clients[i].send({
	ack: param.timestamp,
	msg_num: param.msg_num,
	data: param.data   // TODO: check for changed data
      });
  }
}

client.prototype.broadcast=function(param) {
  var current_client=this;

  if(!param.data)
    param.data={};

  db.run("insert into message (peer_id, timestamp, type, data) values (?, ?, ?, ?)",
      [ this.peer_id, param.timestamp, param.type, JSON.stringify(param.data) ], function(error) {
	if(error) {
	  console.log("Error inserting into database: "+error.message);
	}
	else {
	  param.msg_num=this.lastID;
	  current_client.db_callback_message(param, this);
	}
      });
}

client.prototype.send=function(data) {
  this.connection.sendUTF(JSON.stringify(data));
}

wsServer.on('request', function(request) {
  console.log((new Date())+" Connection from "+request.origin);

  var connection=request.accept(null, request.origin);
  new client(connection, request);
});

client.prototype.close=function() {
  this.connection.close();
}
