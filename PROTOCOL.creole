{{{
          Server
            |
    +-------+-------+
    |       |       |
 Peer A   Peer B  Peer C
}}}

All peers gather information and pass them to the Server, which broadcasts the
messages to the other peers.

This is what a message looks like:

{{{
{
  timestamp: '2013-02-20T15:19:11.943Z'   // ISO-8601 date (unique for a peer)
  received: '2013-02-20T15:19:12.123Z',   // ISO-8601 date (set by server, 
                                          // unique for event)
  peer_id: 'ABCD',                        // set by server
  type: 'chat',
  data: .....                             // payload
}
}}}

Received is a unique value set by the server in order of arrival. If a message
is received at the same time, the milliseconds are increased until a free value
is found. They might not be in order of timestamp (even for a single peer).
Clients may use received after re-connecting to request missing messages.

When a peer sends a message to the server, the server responds with a message:
{{{
{
  ack: '2013-02-20T15:19:11.943Z',        // timestamp of original message
  received: '2013-02-20T15:19:12.123Z',
  data: .....                             // optional, only when modified
}
}}}

Therefore a peer may update its message with the received timestamp.

== Scenarios ==

We have to consider the following scenarios:
=== Live update ===
Peer A has a message -> transmits to server -> broadcasts to peers B and C; give acknowledgement to peer A.

=== Connection failure ===
Peer A accumulates messages which were not yet sent to the server (or at least didn't get response about successful transmission). Furthermore broadcasts from the server do not reach peer A. Therefore, after re-connect, peer A needs to submit missing messages (Server can detect already received messages from the timestamp) and needs to request missing broadcasts (it knows the highest received timestamp and can continue from there).

Re-sent messages should a a key 'resend' with value true, therefore Server can check for duplicate messages. Server should reply with an 'ack' message in any case.

Request for missing messages:
{{{
{
  request: 'all',
  min_received: '2013-02-20T15:19:12.123Z' // highest known received timestamp
}
}}}

Reply with messages received > '2013-02-20T15:19:12.123Z'.

=== Playback ===
In 'Playback'-mode it's more advisable to request messages from timestamp.
{{{
{
  request: 'all',
  min_timestamp: '2013-02-20T15:19:11.943Z', // highest known timestamp
  max_timestamp: '2013-02-20T15:30:11Z'      // up to (including) this timestamp
}
}}}

Reply with messages > '2013-02-20T15:19:11.943Z' and <= '2013-02-20T15:30:11Z'

=== Connect / Authentication ===
Currently we do not define authentication.

After connecting, the Peer sends a message to Server:
{{{
{
  type: 'hello',
  client_id: 'DCBA',                      // null if no cookie found
}
}}}

Server replies with a message to the peer:
{{{
{
  type: 'welcome',
  timestamp: '2013-02-20T15:30:11Z',      // peer should syncronize it's clock
  peer_id: 'ABCD',
  client_id: 'DCBA'                       // authentication of client, will be
                                          // set as cookie on the client
}
}}}

It also sends a message to the other peers:
{{{
{
  type: 'connect',
  received: '2013-02-20T15:19:12.123Z',
  timestamp: '2013-02-20T15:30:11Z',
  peer_id: 'ABCD'
}
}}}

=== Disconnect ===
When a client breaks the connection to the server, the server broadcasts a message to the peers:
{{{
{
  type: 'disconnect',
  received: '2013-02-20T15:19:12.123Z',
  timestamp: '2013-02-20T15:30:11Z',
  peer_id: 'ABCD'
}
}}}

resp. the client may initiate a disconnect by sending:
{{{
{
  type: 'disconnect',
  timestamp: '2013-02-20T15:30:11Z',
}
}}}

=== Connect / Playback ===
When connecting we might need some messages, e.g. all messages of a specific type (e.g. Pictures taken) or the last messages of all peers of a specific type (e.g. Name changes). Therefore we define more requests:

Request all messages of a specific type:
{{{
{
  request: 'all',
  type: 'chat'
}
}}}

Request last messages of peers of a specific type:
{{{
  request: 'newest',
  type: 'avatar'
}}}

Request last messages of peers of a specific type up to a timestamp:
{{{
  request: 'newest',
  type: 'avatar',
  max_timestamp: '2013-02-20T15:30:11Z'
}}}

=== Summary of request ===
{{{
{
  request: 'all' or 'newest',             // see above
  type: null or string,                   // filter for type
  peer_id: null or string,                // filter for a peer
  min_received: null or ISO-date,         // > min_received
  max_received: null or ISO-date,         // <= max_received
  min_timestamp: null or ISO-date,        // > min_timestamp
  max_timestamp: null or ISO-date,        // <= max_timestamp
}
}}}

A request may not contain filters for received AND timestamp.
